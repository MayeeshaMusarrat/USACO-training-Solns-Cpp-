/*
ID: musarra1
TASK: namenum
LANG: C++
*/

#include <ext/rope>
#include<bits/stdc++.h>
#define endl '\n'
#define ll long long
#define pb push_back
#define yes cout<<"YES"<<endl;
#define no cout<<"NO"<<endl;
#define ios ios::sync_with_stdio(false); cin.tie(NULL);

using namespace __gnu_cxx;
using namespace std;

void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\"' << x << '\"';}
void __print(const string &x) {cerr << '\"' << x << '\"';}
void __print(bool x) {cerr << (x ? "true" : "false");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}
void _print() {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}
#ifndef ONLINE_JUDGE
#define debug(x...) cerr << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)
#endif

map<char,char> alpha;
map<string,set<string>> dict;

void read()
{
    freopen("namenum.in","r",stdin);
	freopen("namenum.out","w",stdout);
}

void solve()
{
    read();
    string s;cin>>s;
    vector<string> v;
    if(dict[s].size()>0)
    {
        for(auto i:dict[s])
          cout<<i<<endl;
    }
    else
        cout<<"NONE"<<endl;
}

int main()
{
    ios
    ll t=1;
    //cin>>t;
    char c='A';
    int cnt;
    for(char i='2';i<='6';++i)
    {
        cnt=0;
        while(cnt<3)
        {
            alpha[c++]=i;
            ++cnt;
        }
    }
    alpha['P']=alpha['R']=alpha['S']='7';
    alpha['T']=alpha['U']=alpha['V']='8';
    alpha['W']=alpha['X']=alpha['Y']='9';

    string line,res="",str;
    vector<string> v;
    ifstream cin("dict.txt");
    while(cin>>line)
    {
        v.pb(line);
    }
    //debug(v);
    for(auto i:v)
    {
        res="";
        for(int j=0;j<i.size();++j)
        {
            res+=alpha[i[j]];
        }
        dict[res].insert(i);
    }
    for(ll tc=1;tc<=t;++tc)
    {
       // cout<<"Case "<<tc<<": "<<endl;
        solve();

    }
    return 0;
}
